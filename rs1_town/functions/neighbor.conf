include "rpki.conf";
include "predefined.conf";

function should_do_action (int action_base; int peer_asn) -> int
int matched_actions;
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
{
    matched_actions       = 0;
    action_to_all_asn     = action_base;      # 1000
    action_not_to_asn     = action_base + 1;  # 1001
    action_to_asn         = action_base + 2;  # 1002

    # 只向指定 ASN 导出
    if (MY_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community then {
        matched_actions = matched_actions + 1;
    }
    # 或者如果存在全体 ASN 的动作，且没有排除指定 ASN
    if ((MY_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community) then {
        matched_actions = matched_actions + 1;
    }

    return matched_actions;
}

function do_control_action(int peer_asn) -> bool
int matched_action;
{
    # (ixasn, 1000, 0) 不向任何导出
    if (MY_COMMUNITY, 1000, 0) ~ bgp_large_community then {
        print "CONTROL_ACTION: Rejecting ", net, " to AS", peer_asn, " - Do not export to anyone (1000,0)";
        reject;
    }

    # (ixasn, 1001, asn) 不向指定 ASN 导出
    matched_action = should_do_action(1001, peer_asn);
    if matched_action > 0 then {
        print "CONTROL_ACTION: Rejecting ", net, " to AS", peer_asn, " - Excluded ASN (1001,", peer_asn, ")";
        reject;
    }

    # (ixasn, 1002, asn) 只向指定 ASN 导出
    matched_action = should_do_action(1002, peer_asn);
    if matched_action > 0 then {
        print "CONTROL_ACTION: Accepting ", net, " to AS", peer_asn, " - Specific ASN allowed (1002,", peer_asn, ")";
        accept;
    }
}

function path_whitelist(int set allowed_path)
{
    if delete(bgp_path,allowed_path).len > 0 then {
        print "PATH_WHITELIST: Rejecting ", net, " - Path contains disallowed ASN, path: ", bgp_path;
        reject;
    }
}

function net_whitelist(prefix set prefix_whitelist)
{
    if net !~ prefix_whitelist then {
        print "NET_WHITELIST: Rejecting ", net, " from AS", bgp_path.first, " - Not in prefix whitelist";
        reject;
    }
}

function node_import(int peer_asn; prefix set prefix_whitelist; int set asn_whitelist) -> bool {
    if is_bogon_prefix() || is_default() || (bgp_path.len > 100) then reject;
    bgp_large_community.delete([(MY_COMMUNITY, 0..999, *)]);
    do_rpki_check();
    net_whitelist(prefix_whitelist);
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
}

function node_export(int peer_asn; prefix set prefix_whitelist; int set asn_whitelist) -> bool {
    if is_bogon_prefix() || is_default() || (bgp_path.len > 100) then reject;
    if bgp_large_community ~ [(MY_COMMUNITY,  2,*)] then reject; # Implement (asn, 2,*)   do not send to anyone
    bgp_large_community.delete([(MY_COMMUNITY, 0..9999 , *)]);
    net_whitelist(prefix_whitelist);
    do_control_action(peer_asn);
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
};